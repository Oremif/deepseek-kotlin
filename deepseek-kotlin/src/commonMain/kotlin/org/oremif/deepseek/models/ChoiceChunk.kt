package org.oremif.deepseek.models

import kotlinx.serialization.Serializable

/**
 * @property delta A chat completion delta generated by streamed model responses.
 * @property finishReason The reason the model stopped generating tokens.
 * This will be `stop` if the model hit a natural stop point or a provided stop sequence,
 * `length` if the maximum number of tokens specified in the request was reached,
 * `content_filter` if content was omitted due to a flag from our content filters,
 * `tool_calls` if the model called a tool,
 * or `insufficient_system_resource` if the request is interrupted due to insufficient resource of the inference system.
 *
 * **Possible values: {`stop`, `length`, `content_filter`, `tool_calls`, `insufficient_system_resource`}**
 * @property index The index of the choice in the list of choices.
 */
@Serializable
public class ChoiceChunk(
    public val delta: AssistantMessage,
    public val finishReason: FinishReason?,
    public val index: Long,
) {
    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is ChoiceChunk) return false

        return delta == other.delta && finishReason == other.finishReason && index == other.index
    }

    override fun hashCode(): Int {
        var result = delta.hashCode()
        result = 31 * result + (finishReason?.hashCode() ?: 0)
        result = 31 * result + index.hashCode()
        return result
    }

    override fun toString(): String =
        "ChatCompletionChoiceChunk(delta=$delta, finishReason=$finishReason, index=$index)"
}